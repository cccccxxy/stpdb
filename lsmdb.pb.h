// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: lsmdb.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_lsmdb_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_lsmdb_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lsmdb_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lsmdb_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lsmdb_2eproto;
namespace lsmdb {
namespace v1 {
class BatchPutReply;
struct BatchPutReplyDefaultTypeInternal;
extern BatchPutReplyDefaultTypeInternal _BatchPutReply_default_instance_;
class BatchPutRequest;
struct BatchPutRequestDefaultTypeInternal;
extern BatchPutRequestDefaultTypeInternal _BatchPutRequest_default_instance_;
class CloseDBReply;
struct CloseDBReplyDefaultTypeInternal;
extern CloseDBReplyDefaultTypeInternal _CloseDBReply_default_instance_;
class CloseDBRequest;
struct CloseDBRequestDefaultTypeInternal;
extern CloseDBRequestDefaultTypeInternal _CloseDBRequest_default_instance_;
class CloseDBWebReply;
struct CloseDBWebReplyDefaultTypeInternal;
extern CloseDBWebReplyDefaultTypeInternal _CloseDBWebReply_default_instance_;
class CloseDBWebRequest;
struct CloseDBWebRequestDefaultTypeInternal;
extern CloseDBWebRequestDefaultTypeInternal _CloseDBWebRequest_default_instance_;
class GetKVsReply;
struct GetKVsReplyDefaultTypeInternal;
extern GetKVsReplyDefaultTypeInternal _GetKVsReply_default_instance_;
class GetKVsRequest;
struct GetKVsRequestDefaultTypeInternal;
extern GetKVsRequestDefaultTypeInternal _GetKVsRequest_default_instance_;
class GetReply;
struct GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class OpenDBReply;
struct OpenDBReplyDefaultTypeInternal;
extern OpenDBReplyDefaultTypeInternal _OpenDBReply_default_instance_;
class OpenDBRequest;
struct OpenDBRequestDefaultTypeInternal;
extern OpenDBRequestDefaultTypeInternal _OpenDBRequest_default_instance_;
class OpenDBWebReply;
struct OpenDBWebReplyDefaultTypeInternal;
extern OpenDBWebReplyDefaultTypeInternal _OpenDBWebReply_default_instance_;
class OpenDBWebRequest;
struct OpenDBWebRequestDefaultTypeInternal;
extern OpenDBWebRequestDefaultTypeInternal _OpenDBWebRequest_default_instance_;
class PrefixRequest;
struct PrefixRequestDefaultTypeInternal;
extern PrefixRequestDefaultTypeInternal _PrefixRequest_default_instance_;
class PrefixResponse;
struct PrefixResponseDefaultTypeInternal;
extern PrefixResponseDefaultTypeInternal _PrefixResponse_default_instance_;
class PutReply;
struct PutReplyDefaultTypeInternal;
extern PutReplyDefaultTypeInternal _PutReply_default_instance_;
class PutRequest;
struct PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutStrReply;
struct PutStrReplyDefaultTypeInternal;
extern PutStrReplyDefaultTypeInternal _PutStrReply_default_instance_;
class PutStrRequest;
struct PutStrRequestDefaultTypeInternal;
extern PutStrRequestDefaultTypeInternal _PutStrRequest_default_instance_;
class TransferKVReply;
struct TransferKVReplyDefaultTypeInternal;
extern TransferKVReplyDefaultTypeInternal _TransferKVReply_default_instance_;
class TransferKVRequest;
struct TransferKVRequestDefaultTypeInternal;
extern TransferKVRequestDefaultTypeInternal _TransferKVRequest_default_instance_;
class TransferReply;
struct TransferReplyDefaultTypeInternal;
extern TransferReplyDefaultTypeInternal _TransferReply_default_instance_;
class TransferRequest;
struct TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
}  // namespace v1
}  // namespace lsmdb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace lsmdb {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TransferRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.TransferRequest) */ {
 public:
  inline TransferRequest() : TransferRequest(nullptr) {}
  ~TransferRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferRequest(const TransferRequest& from) : TransferRequest(nullptr, from) {}
  inline TransferRequest(TransferRequest&& from) noexcept
      : TransferRequest(nullptr, std::move(from)) {}
  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
        &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TransferRequest& a, TransferRequest& b) { a.Swap(&b); }
  inline void Swap(TransferRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransferRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferRequest& from) { TransferRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransferRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.TransferRequest"; }

 protected:
  explicit TransferRequest(::google::protobuf::Arena* arena);
  TransferRequest(::google::protobuf::Arena* arena, const TransferRequest& from);
  TransferRequest(::google::protobuf::Arena* arena, TransferRequest&& from) noexcept
      : TransferRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeysFieldNumber = 2,
    kRegionNameFieldNumber = 1,
    kNodeAddressFieldNumber = 3,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string regionName = 1;
  void clear_regionname() ;
  const std::string& regionname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_regionname(Arg_&& arg, Args_... args);
  std::string* mutable_regionname();
  PROTOBUF_NODISCARD std::string* release_regionname();
  void set_allocated_regionname(std::string* value);

  private:
  const std::string& _internal_regionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regionname(
      const std::string& value);
  std::string* _internal_mutable_regionname();

  public:
  // string nodeAddress = 3;
  void clear_nodeaddress() ;
  const std::string& nodeaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodeaddress(Arg_&& arg, Args_... args);
  std::string* mutable_nodeaddress();
  PROTOBUF_NODISCARD std::string* release_nodeaddress();
  void set_allocated_nodeaddress(std::string* value);

  private:
  const std::string& _internal_nodeaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeaddress(
      const std::string& value);
  std::string* _internal_mutable_nodeaddress();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.TransferRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      58, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransferRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::internal::ArenaStringPtr regionname_;
    ::google::protobuf::internal::ArenaStringPtr nodeaddress_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class TransferReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.TransferReply) */ {
 public:
  inline TransferReply() : TransferReply(nullptr) {}
  ~TransferReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferReply(const TransferReply& from) : TransferReply(nullptr, from) {}
  inline TransferReply(TransferReply&& from) noexcept
      : TransferReply(nullptr, std::move(from)) {}
  inline TransferReply& operator=(const TransferReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferReply& operator=(TransferReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferReply* internal_default_instance() {
    return reinterpret_cast<const TransferReply*>(
        &_TransferReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(TransferReply& a, TransferReply& b) { a.Swap(&b); }
  inline void Swap(TransferReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransferReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferReply& from) { TransferReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransferReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.TransferReply"; }

 protected:
  explicit TransferReply(::google::protobuf::Arena* arena);
  TransferReply(::google::protobuf::Arena* arena, const TransferReply& from);
  TransferReply(::google::protobuf::Arena* arena, TransferReply&& from) noexcept
      : TransferReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.TransferReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransferReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferReply& from_msg);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class TransferKVRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.TransferKVRequest) */ {
 public:
  inline TransferKVRequest() : TransferKVRequest(nullptr) {}
  ~TransferKVRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferKVRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferKVRequest(const TransferKVRequest& from) : TransferKVRequest(nullptr, from) {}
  inline TransferKVRequest(TransferKVRequest&& from) noexcept
      : TransferKVRequest(nullptr, std::move(from)) {}
  inline TransferKVRequest& operator=(const TransferKVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferKVRequest& operator=(TransferKVRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferKVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferKVRequest* internal_default_instance() {
    return reinterpret_cast<const TransferKVRequest*>(
        &_TransferKVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TransferKVRequest& a, TransferKVRequest& b) { a.Swap(&b); }
  inline void Swap(TransferKVRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferKVRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferKVRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransferKVRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferKVRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferKVRequest& from) { TransferKVRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransferKVRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.TransferKVRequest"; }

 protected:
  explicit TransferKVRequest(::google::protobuf::Arena* arena);
  TransferKVRequest(::google::protobuf::Arena* arena, const TransferKVRequest& from);
  TransferKVRequest(::google::protobuf::Arena* arena, TransferKVRequest&& from) noexcept
      : TransferKVRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeysFieldNumber = 2,
    kRegionNameFieldNumber = 1,
    kNodeAddressFieldNumber = 3,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string regionName = 1;
  void clear_regionname() ;
  const std::string& regionname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_regionname(Arg_&& arg, Args_... args);
  std::string* mutable_regionname();
  PROTOBUF_NODISCARD std::string* release_regionname();
  void set_allocated_regionname(std::string* value);

  private:
  const std::string& _internal_regionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regionname(
      const std::string& value);
  std::string* _internal_mutable_regionname();

  public:
  // string nodeAddress = 3;
  void clear_nodeaddress() ;
  const std::string& nodeaddress() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodeaddress(Arg_&& arg, Args_... args);
  std::string* mutable_nodeaddress();
  PROTOBUF_NODISCARD std::string* release_nodeaddress();
  void set_allocated_nodeaddress(std::string* value);

  private:
  const std::string& _internal_nodeaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeaddress(
      const std::string& value);
  std::string* _internal_mutable_nodeaddress();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.TransferKVRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransferKVRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferKVRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::internal::ArenaStringPtr regionname_;
    ::google::protobuf::internal::ArenaStringPtr nodeaddress_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class TransferKVReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.TransferKVReply) */ {
 public:
  inline TransferKVReply() : TransferKVReply(nullptr) {}
  ~TransferKVReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferKVReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferKVReply(const TransferKVReply& from) : TransferKVReply(nullptr, from) {}
  inline TransferKVReply(TransferKVReply&& from) noexcept
      : TransferKVReply(nullptr, std::move(from)) {}
  inline TransferKVReply& operator=(const TransferKVReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferKVReply& operator=(TransferKVReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferKVReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferKVReply* internal_default_instance() {
    return reinterpret_cast<const TransferKVReply*>(
        &_TransferKVReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TransferKVReply& a, TransferKVReply& b) { a.Swap(&b); }
  inline void Swap(TransferKVReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferKVReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferKVReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TransferKVReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferKVReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferKVReply& from) { TransferKVReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransferKVReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.TransferKVReply"; }

 protected:
  explicit TransferKVReply(::google::protobuf::Arena* arena);
  TransferKVReply(::google::protobuf::Arena* arena, const TransferKVReply& from);
  TransferKVReply(::google::protobuf::Arena* arena, TransferKVReply&& from) noexcept
      : TransferKVReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.TransferKVReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TransferKVReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferKVReply& from_msg);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PutStrRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PutStrRequest) */ {
 public:
  inline PutStrRequest() : PutStrRequest(nullptr) {}
  ~PutStrRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutStrRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutStrRequest(const PutStrRequest& from) : PutStrRequest(nullptr, from) {}
  inline PutStrRequest(PutStrRequest&& from) noexcept
      : PutStrRequest(nullptr, std::move(from)) {}
  inline PutStrRequest& operator=(const PutStrRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutStrRequest& operator=(PutStrRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutStrRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutStrRequest* internal_default_instance() {
    return reinterpret_cast<const PutStrRequest*>(
        &_PutStrRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(PutStrRequest& a, PutStrRequest& b) { a.Swap(&b); }
  inline void Swap(PutStrRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutStrRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutStrRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutStrRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutStrRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutStrRequest& from) { PutStrRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutStrRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PutStrRequest"; }

 protected:
  explicit PutStrRequest(::google::protobuf::Arena* arena);
  PutStrRequest(::google::protobuf::Arena* arena, const PutStrRequest& from);
  PutStrRequest(::google::protobuf::Arena* arena, PutStrRequest&& from) noexcept
      : PutStrRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PutStrRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutStrRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutStrRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PutStrReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PutStrReply) */ {
 public:
  inline PutStrReply() : PutStrReply(nullptr) {}
  ~PutStrReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutStrReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutStrReply(const PutStrReply& from) : PutStrReply(nullptr, from) {}
  inline PutStrReply(PutStrReply&& from) noexcept
      : PutStrReply(nullptr, std::move(from)) {}
  inline PutStrReply& operator=(const PutStrReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutStrReply& operator=(PutStrReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutStrReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutStrReply* internal_default_instance() {
    return reinterpret_cast<const PutStrReply*>(
        &_PutStrReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(PutStrReply& a, PutStrReply& b) { a.Swap(&b); }
  inline void Swap(PutStrReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutStrReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutStrReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutStrReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutStrReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutStrReply& from) { PutStrReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutStrReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PutStrReply"; }

 protected:
  explicit PutStrReply(::google::protobuf::Arena* arena);
  PutStrReply(::google::protobuf::Arena* arena, const PutStrReply& from);
  PutStrReply(::google::protobuf::Arena* arena, PutStrReply&& from) noexcept
      : PutStrReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bool data = 1;
  void clear_data() ;
  bool data() const;
  void set_data(bool value);

  private:
  bool _internal_data() const;
  void _internal_set_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PutStrReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutStrReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutStrReply& from_msg);
    bool data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PutRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  ~PutRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutRequest(const PutRequest& from) : PutRequest(nullptr, from) {}
  inline PutRequest(PutRequest&& from) noexcept
      : PutRequest(nullptr, std::move(from)) {}
  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
        &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(PutRequest& a, PutRequest& b) { a.Swap(&b); }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutRequest& from) { PutRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PutRequest"; }

 protected:
  explicit PutRequest(::google::protobuf::Arena* arena);
  PutRequest(::google::protobuf::Arena* arena, const PutRequest& from);
  PutRequest(::google::protobuf::Arena* arena, PutRequest&& from) noexcept
      : PutRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PutRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PutReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PutReply) */ {
 public:
  inline PutReply() : PutReply(nullptr) {}
  ~PutReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutReply(const PutReply& from) : PutReply(nullptr, from) {}
  inline PutReply(PutReply&& from) noexcept
      : PutReply(nullptr, std::move(from)) {}
  inline PutReply& operator=(const PutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutReply& operator=(PutReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutReply* internal_default_instance() {
    return reinterpret_cast<const PutReply*>(
        &_PutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(PutReply& a, PutReply& b) { a.Swap(&b); }
  inline void Swap(PutReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutReply& from) { PutReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PutReply"; }

 protected:
  explicit PutReply(::google::protobuf::Arena* arena);
  PutReply(::google::protobuf::Arena* arena, const PutReply& from);
  PutReply(::google::protobuf::Arena* arena, PutReply&& from) noexcept
      : PutReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bool data = 1;
  void clear_data() ;
  bool data() const;
  void set_data(bool value);

  private:
  bool _internal_data() const;
  void _internal_set_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PutReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutReply& from_msg);
    bool data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PrefixRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PrefixRequest) */ {
 public:
  inline PrefixRequest() : PrefixRequest(nullptr) {}
  ~PrefixRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrefixRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrefixRequest(const PrefixRequest& from) : PrefixRequest(nullptr, from) {}
  inline PrefixRequest(PrefixRequest&& from) noexcept
      : PrefixRequest(nullptr, std::move(from)) {}
  inline PrefixRequest& operator=(const PrefixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixRequest& operator=(PrefixRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrefixRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefixRequest* internal_default_instance() {
    return reinterpret_cast<const PrefixRequest*>(
        &_PrefixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PrefixRequest& a, PrefixRequest& b) { a.Swap(&b); }
  inline void Swap(PrefixRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefixRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PrefixRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrefixRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PrefixRequest& from) { PrefixRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrefixRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PrefixRequest"; }

 protected:
  explicit PrefixRequest(::google::protobuf::Arena* arena);
  PrefixRequest(::google::protobuf::Arena* arena, const PrefixRequest& from);
  PrefixRequest(::google::protobuf::Arena* arena, PrefixRequest&& from) noexcept
      : PrefixRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrefixKeyFieldNumber = 1,
  };
  // string prefixKey = 1;
  void clear_prefixkey() ;
  const std::string& prefixkey() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefixkey(Arg_&& arg, Args_... args);
  std::string* mutable_prefixkey();
  PROTOBUF_NODISCARD std::string* release_prefixkey();
  void set_allocated_prefixkey(std::string* value);

  private:
  const std::string& _internal_prefixkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefixkey(
      const std::string& value);
  std::string* _internal_mutable_prefixkey();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PrefixRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PrefixRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrefixRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr prefixkey_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class OpenDBWebRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.OpenDBWebRequest) */ {
 public:
  inline OpenDBWebRequest() : OpenDBWebRequest(nullptr) {}
  ~OpenDBWebRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenDBWebRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenDBWebRequest(const OpenDBWebRequest& from) : OpenDBWebRequest(nullptr, from) {}
  inline OpenDBWebRequest(OpenDBWebRequest&& from) noexcept
      : OpenDBWebRequest(nullptr, std::move(from)) {}
  inline OpenDBWebRequest& operator=(const OpenDBWebRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDBWebRequest& operator=(OpenDBWebRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenDBWebRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDBWebRequest* internal_default_instance() {
    return reinterpret_cast<const OpenDBWebRequest*>(
        &_OpenDBWebRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(OpenDBWebRequest& a, OpenDBWebRequest& b) { a.Swap(&b); }
  inline void Swap(OpenDBWebRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDBWebRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenDBWebRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenDBWebRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenDBWebRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenDBWebRequest& from) { OpenDBWebRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenDBWebRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.OpenDBWebRequest"; }

 protected:
  explicit OpenDBWebRequest(::google::protobuf::Arena* arena);
  OpenDBWebRequest(::google::protobuf::Arena* arena, const OpenDBWebRequest& from);
  OpenDBWebRequest(::google::protobuf::Arena* arena, OpenDBWebRequest&& from) noexcept
      : OpenDBWebRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDbnameFieldNumber = 1,
  };
  // string dbname = 1;
  void clear_dbname() ;
  const std::string& dbname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dbname(Arg_&& arg, Args_... args);
  std::string* mutable_dbname();
  PROTOBUF_NODISCARD std::string* release_dbname();
  void set_allocated_dbname(std::string* value);

  private:
  const std::string& _internal_dbname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dbname(
      const std::string& value);
  std::string* _internal_mutable_dbname();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.OpenDBWebRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenDBWebRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenDBWebRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dbname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class OpenDBWebReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.OpenDBWebReply) */ {
 public:
  inline OpenDBWebReply() : OpenDBWebReply(nullptr) {}
  ~OpenDBWebReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenDBWebReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenDBWebReply(const OpenDBWebReply& from) : OpenDBWebReply(nullptr, from) {}
  inline OpenDBWebReply(OpenDBWebReply&& from) noexcept
      : OpenDBWebReply(nullptr, std::move(from)) {}
  inline OpenDBWebReply& operator=(const OpenDBWebReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDBWebReply& operator=(OpenDBWebReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenDBWebReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDBWebReply* internal_default_instance() {
    return reinterpret_cast<const OpenDBWebReply*>(
        &_OpenDBWebReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(OpenDBWebReply& a, OpenDBWebReply& b) { a.Swap(&b); }
  inline void Swap(OpenDBWebReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDBWebReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenDBWebReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenDBWebReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenDBWebReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenDBWebReply& from) { OpenDBWebReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenDBWebReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.OpenDBWebReply"; }

 protected:
  explicit OpenDBWebReply(::google::protobuf::Arena* arena);
  OpenDBWebReply(::google::protobuf::Arena* arena, const OpenDBWebReply& from);
  OpenDBWebReply(::google::protobuf::Arena* arena, OpenDBWebReply&& from) noexcept
      : OpenDBWebReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.OpenDBWebReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenDBWebReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenDBWebReply& from_msg);
    bool value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class OpenDBRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.OpenDBRequest) */ {
 public:
  inline OpenDBRequest() : OpenDBRequest(nullptr) {}
  ~OpenDBRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenDBRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenDBRequest(const OpenDBRequest& from) : OpenDBRequest(nullptr, from) {}
  inline OpenDBRequest(OpenDBRequest&& from) noexcept
      : OpenDBRequest(nullptr, std::move(from)) {}
  inline OpenDBRequest& operator=(const OpenDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDBRequest& operator=(OpenDBRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenDBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDBRequest* internal_default_instance() {
    return reinterpret_cast<const OpenDBRequest*>(
        &_OpenDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(OpenDBRequest& a, OpenDBRequest& b) { a.Swap(&b); }
  inline void Swap(OpenDBRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDBRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenDBRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenDBRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenDBRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenDBRequest& from) { OpenDBRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenDBRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.OpenDBRequest"; }

 protected:
  explicit OpenDBRequest(::google::protobuf::Arena* arena);
  OpenDBRequest(::google::protobuf::Arena* arena, const OpenDBRequest& from);
  OpenDBRequest(::google::protobuf::Arena* arena, OpenDBRequest&& from) noexcept
      : OpenDBRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDbNameFieldNumber = 1,
  };
  // string db_name = 1;
  void clear_db_name() ;
  const std::string& db_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_name(Arg_&& arg, Args_... args);
  std::string* mutable_db_name();
  PROTOBUF_NODISCARD std::string* release_db_name();
  void set_allocated_db_name(std::string* value);

  private:
  const std::string& _internal_db_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_name(
      const std::string& value);
  std::string* _internal_mutable_db_name();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.OpenDBRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenDBRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenDBRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr db_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class OpenDBReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.OpenDBReply) */ {
 public:
  inline OpenDBReply() : OpenDBReply(nullptr) {}
  ~OpenDBReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OpenDBReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline OpenDBReply(const OpenDBReply& from) : OpenDBReply(nullptr, from) {}
  inline OpenDBReply(OpenDBReply&& from) noexcept
      : OpenDBReply(nullptr, std::move(from)) {}
  inline OpenDBReply& operator=(const OpenDBReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenDBReply& operator=(OpenDBReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenDBReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenDBReply* internal_default_instance() {
    return reinterpret_cast<const OpenDBReply*>(
        &_OpenDBReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(OpenDBReply& a, OpenDBReply& b) { a.Swap(&b); }
  inline void Swap(OpenDBReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenDBReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenDBReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OpenDBReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpenDBReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OpenDBReply& from) { OpenDBReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpenDBReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.OpenDBReply"; }

 protected:
  explicit OpenDBReply(::google::protobuf::Arena* arena);
  OpenDBReply(::google::protobuf::Arena* arena, const OpenDBReply& from);
  OpenDBReply(::google::protobuf::Arena* arena, OpenDBReply&& from) noexcept
      : OpenDBReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.OpenDBReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OpenDBReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OpenDBReply& from_msg);
    bool value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class KeyValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyValue(const KeyValue& from) : KeyValue(nullptr, from) {}
  inline KeyValue(KeyValue&& from) noexcept
      : KeyValue(nullptr, std::move(from)) {}
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
        &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(KeyValue& a, KeyValue& b) { a.Swap(&b); }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<KeyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyValue& from) { KeyValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KeyValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.KeyValue"; }

 protected:
  explicit KeyValue(::google::protobuf::Arena* arena);
  KeyValue(::google::protobuf::Arena* arena, const KeyValue& from);
  KeyValue(::google::protobuf::Arena* arena, KeyValue&& from) noexcept
      : KeyValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.KeyValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_KeyValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyValue& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRequest(const GetRequest& from) : GetRequest(nullptr, from) {}
  inline GetRequest(GetRequest&& from) noexcept
      : GetRequest(nullptr, std::move(from)) {}
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
        &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(GetRequest& a, GetRequest& b) { a.Swap(&b); }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRequest& from) { GetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.GetRequest"; }

 protected:
  explicit GetRequest(::google::protobuf::Arena* arena);
  GetRequest(::google::protobuf::Arena* arena, const GetRequest& from);
  GetRequest(::google::protobuf::Arena* arena, GetRequest&& from) noexcept
      : GetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.GetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class GetReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  ~GetReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetReply(const GetReply& from) : GetReply(nullptr, from) {}
  inline GetReply(GetReply&& from) noexcept
      : GetReply(nullptr, std::move(from)) {}
  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
        &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(GetReply& a, GetReply& b) { a.Swap(&b); }
  inline void Swap(GetReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetReply& from) { GetReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.GetReply"; }

 protected:
  explicit GetReply(::google::protobuf::Arena* arena);
  GetReply(::google::protobuf::Arena* arena, const GetReply& from);
  GetReply(::google::protobuf::Arena* arena, GetReply&& from) noexcept
      : GetReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.GetReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetReply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class GetKVsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.GetKVsRequest) */ {
 public:
  inline GetKVsRequest() : GetKVsRequest(nullptr) {}
  ~GetKVsRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetKVsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetKVsRequest(const GetKVsRequest& from) : GetKVsRequest(nullptr, from) {}
  inline GetKVsRequest(GetKVsRequest&& from) noexcept
      : GetKVsRequest(nullptr, std::move(from)) {}
  inline GetKVsRequest& operator=(const GetKVsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVsRequest& operator=(GetKVsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVsRequest* internal_default_instance() {
    return reinterpret_cast<const GetKVsRequest*>(
        &_GetKVsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GetKVsRequest& a, GetKVsRequest& b) { a.Swap(&b); }
  inline void Swap(GetKVsRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetKVsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetKVsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetKVsRequest& from) { GetKVsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetKVsRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.GetKVsRequest"; }

 protected:
  explicit GetKVsRequest(::google::protobuf::Arena* arena);
  GetKVsRequest(::google::protobuf::Arena* arena, const GetKVsRequest& from);
  GetKVsRequest(::google::protobuf::Arena* arena, GetKVsRequest&& from) noexcept
      : GetKVsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.GetKVsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetKVsRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetKVsRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class GetKVsReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.GetKVsReply) */ {
 public:
  inline GetKVsReply() : GetKVsReply(nullptr) {}
  ~GetKVsReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetKVsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetKVsReply(const GetKVsReply& from) : GetKVsReply(nullptr, from) {}
  inline GetKVsReply(GetKVsReply&& from) noexcept
      : GetKVsReply(nullptr, std::move(from)) {}
  inline GetKVsReply& operator=(const GetKVsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVsReply& operator=(GetKVsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVsReply* internal_default_instance() {
    return reinterpret_cast<const GetKVsReply*>(
        &_GetKVsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetKVsReply& a, GetKVsReply& b) { a.Swap(&b); }
  inline void Swap(GetKVsReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVsReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetKVsReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetKVsReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetKVsReply& from) { GetKVsReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetKVsReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.GetKVsReply"; }

 protected:
  explicit GetKVsReply(::google::protobuf::Arena* arena);
  GetKVsReply(::google::protobuf::Arena* arena, const GetKVsReply& from);
  GetKVsReply(::google::protobuf::Arena* arena, GetKVsReply&& from) noexcept
      : GetKVsReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bytes values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, std::size_t size);
  void set_values(int index, absl::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, std::size_t size);
  void add_values(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.GetKVsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GetKVsReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetKVsReply& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class CloseDBWebRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:lsmdb.v1.CloseDBWebRequest) */ {
 public:
  inline CloseDBWebRequest() : CloseDBWebRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CloseDBWebRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CloseDBWebRequest(const CloseDBWebRequest& from) : CloseDBWebRequest(nullptr, from) {}
  inline CloseDBWebRequest(CloseDBWebRequest&& from) noexcept
      : CloseDBWebRequest(nullptr, std::move(from)) {}
  inline CloseDBWebRequest& operator=(const CloseDBWebRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDBWebRequest& operator=(CloseDBWebRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseDBWebRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDBWebRequest* internal_default_instance() {
    return reinterpret_cast<const CloseDBWebRequest*>(
        &_CloseDBWebRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(CloseDBWebRequest& a, CloseDBWebRequest& b) { a.Swap(&b); }
  inline void Swap(CloseDBWebRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDBWebRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseDBWebRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CloseDBWebRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseDBWebRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseDBWebRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.CloseDBWebRequest"; }

 protected:
  explicit CloseDBWebRequest(::google::protobuf::Arena* arena);
  CloseDBWebRequest(::google::protobuf::Arena* arena, const CloseDBWebRequest& from);
  CloseDBWebRequest(::google::protobuf::Arena* arena, CloseDBWebRequest&& from) noexcept
      : CloseDBWebRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:lsmdb.v1.CloseDBWebRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CloseDBWebRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CloseDBWebRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class CloseDBWebReply final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:lsmdb.v1.CloseDBWebReply) */ {
 public:
  inline CloseDBWebReply() : CloseDBWebReply(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CloseDBWebReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline CloseDBWebReply(const CloseDBWebReply& from) : CloseDBWebReply(nullptr, from) {}
  inline CloseDBWebReply(CloseDBWebReply&& from) noexcept
      : CloseDBWebReply(nullptr, std::move(from)) {}
  inline CloseDBWebReply& operator=(const CloseDBWebReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDBWebReply& operator=(CloseDBWebReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseDBWebReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDBWebReply* internal_default_instance() {
    return reinterpret_cast<const CloseDBWebReply*>(
        &_CloseDBWebReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(CloseDBWebReply& a, CloseDBWebReply& b) { a.Swap(&b); }
  inline void Swap(CloseDBWebReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDBWebReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseDBWebReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CloseDBWebReply>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseDBWebReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseDBWebReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.CloseDBWebReply"; }

 protected:
  explicit CloseDBWebReply(::google::protobuf::Arena* arena);
  CloseDBWebReply(::google::protobuf::Arena* arena, const CloseDBWebReply& from);
  CloseDBWebReply(::google::protobuf::Arena* arena, CloseDBWebReply&& from) noexcept
      : CloseDBWebReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:lsmdb.v1.CloseDBWebReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CloseDBWebReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CloseDBWebReply& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class CloseDBRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:lsmdb.v1.CloseDBRequest) */ {
 public:
  inline CloseDBRequest() : CloseDBRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CloseDBRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CloseDBRequest(const CloseDBRequest& from) : CloseDBRequest(nullptr, from) {}
  inline CloseDBRequest(CloseDBRequest&& from) noexcept
      : CloseDBRequest(nullptr, std::move(from)) {}
  inline CloseDBRequest& operator=(const CloseDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDBRequest& operator=(CloseDBRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseDBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDBRequest* internal_default_instance() {
    return reinterpret_cast<const CloseDBRequest*>(
        &_CloseDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(CloseDBRequest& a, CloseDBRequest& b) { a.Swap(&b); }
  inline void Swap(CloseDBRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDBRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseDBRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CloseDBRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseDBRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseDBRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.CloseDBRequest"; }

 protected:
  explicit CloseDBRequest(::google::protobuf::Arena* arena);
  CloseDBRequest(::google::protobuf::Arena* arena, const CloseDBRequest& from);
  CloseDBRequest(::google::protobuf::Arena* arena, CloseDBRequest&& from) noexcept
      : CloseDBRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:lsmdb.v1.CloseDBRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CloseDBRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CloseDBRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class CloseDBReply final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:lsmdb.v1.CloseDBReply) */ {
 public:
  inline CloseDBReply() : CloseDBReply(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CloseDBReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline CloseDBReply(const CloseDBReply& from) : CloseDBReply(nullptr, from) {}
  inline CloseDBReply(CloseDBReply&& from) noexcept
      : CloseDBReply(nullptr, std::move(from)) {}
  inline CloseDBReply& operator=(const CloseDBReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseDBReply& operator=(CloseDBReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseDBReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseDBReply* internal_default_instance() {
    return reinterpret_cast<const CloseDBReply*>(
        &_CloseDBReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(CloseDBReply& a, CloseDBReply& b) { a.Swap(&b); }
  inline void Swap(CloseDBReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseDBReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseDBReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CloseDBReply>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseDBReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseDBReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.CloseDBReply"; }

 protected:
  explicit CloseDBReply(::google::protobuf::Arena* arena);
  CloseDBReply(::google::protobuf::Arena* arena, const CloseDBReply& from);
  CloseDBReply(::google::protobuf::Arena* arena, CloseDBReply&& from) noexcept
      : CloseDBReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:lsmdb.v1.CloseDBReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CloseDBReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CloseDBReply& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class BatchPutRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.BatchPutRequest) */ {
 public:
  inline BatchPutRequest() : BatchPutRequest(nullptr) {}
  ~BatchPutRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BatchPutRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BatchPutRequest(const BatchPutRequest& from) : BatchPutRequest(nullptr, from) {}
  inline BatchPutRequest(BatchPutRequest&& from) noexcept
      : BatchPutRequest(nullptr, std::move(from)) {}
  inline BatchPutRequest& operator=(const BatchPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchPutRequest& operator=(BatchPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchPutRequest* internal_default_instance() {
    return reinterpret_cast<const BatchPutRequest*>(
        &_BatchPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(BatchPutRequest& a, BatchPutRequest& b) { a.Swap(&b); }
  inline void Swap(BatchPutRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchPutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchPutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BatchPutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchPutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BatchPutRequest& from) { BatchPutRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BatchPutRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.BatchPutRequest"; }

 protected:
  explicit BatchPutRequest(::google::protobuf::Arena* arena);
  BatchPutRequest(::google::protobuf::Arena* arena, const BatchPutRequest& from);
  BatchPutRequest(::google::protobuf::Arena* arena, BatchPutRequest&& from) noexcept
      : BatchPutRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // repeated bytes values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, std::size_t size);
  void set_values(int index, absl::string_view value);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, std::size_t size);
  void add_values(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.BatchPutRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BatchPutRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BatchPutRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class BatchPutReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.BatchPutReply) */ {
 public:
  inline BatchPutReply() : BatchPutReply(nullptr) {}
  ~BatchPutReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BatchPutReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline BatchPutReply(const BatchPutReply& from) : BatchPutReply(nullptr, from) {}
  inline BatchPutReply(BatchPutReply&& from) noexcept
      : BatchPutReply(nullptr, std::move(from)) {}
  inline BatchPutReply& operator=(const BatchPutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchPutReply& operator=(BatchPutReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchPutReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchPutReply* internal_default_instance() {
    return reinterpret_cast<const BatchPutReply*>(
        &_BatchPutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(BatchPutReply& a, BatchPutReply& b) { a.Swap(&b); }
  inline void Swap(BatchPutReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchPutReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchPutReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BatchPutReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchPutReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BatchPutReply& from) { BatchPutReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BatchPutReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.BatchPutReply"; }

 protected:
  explicit BatchPutReply(::google::protobuf::Arena* arena);
  BatchPutReply(::google::protobuf::Arena* arena, const BatchPutReply& from);
  BatchPutReply(::google::protobuf::Arena* arena, BatchPutReply&& from) noexcept
      : BatchPutReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bool data = 1;
  void clear_data() ;
  bool data() const;
  void set_data(bool value);

  private:
  bool _internal_data() const;
  void _internal_set_data(bool value);

  public:
  // @@protoc_insertion_point(class_scope:lsmdb.v1.BatchPutReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BatchPutReply_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BatchPutReply& from_msg);
    bool data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};
// -------------------------------------------------------------------

class PrefixResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lsmdb.v1.PrefixResponse) */ {
 public:
  inline PrefixResponse() : PrefixResponse(nullptr) {}
  ~PrefixResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrefixResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrefixResponse(const PrefixResponse& from) : PrefixResponse(nullptr, from) {}
  inline PrefixResponse(PrefixResponse&& from) noexcept
      : PrefixResponse(nullptr, std::move(from)) {}
  inline PrefixResponse& operator=(const PrefixResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixResponse& operator=(PrefixResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrefixResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefixResponse* internal_default_instance() {
    return reinterpret_cast<const PrefixResponse*>(
        &_PrefixResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PrefixResponse& a, PrefixResponse& b) { a.Swap(&b); }
  inline void Swap(PrefixResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrefixResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PrefixResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrefixResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PrefixResponse& from) { PrefixResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrefixResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lsmdb.v1.PrefixResponse"; }

 protected:
  explicit PrefixResponse(::google::protobuf::Arena* arena);
  PrefixResponse(::google::protobuf::Arena* arena, const PrefixResponse& from);
  PrefixResponse(::google::protobuf::Arena* arena, PrefixResponse&& from) noexcept
      : PrefixResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyValueListFieldNumber = 1,
  };
  // repeated .lsmdb.v1.KeyValue keyValueList = 1;
  int keyvaluelist_size() const;
  private:
  int _internal_keyvaluelist_size() const;

  public:
  void clear_keyvaluelist() ;
  ::lsmdb::v1::KeyValue* mutable_keyvaluelist(int index);
  ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>* mutable_keyvaluelist();

  private:
  const ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>& _internal_keyvaluelist() const;
  ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>* _internal_mutable_keyvaluelist();
  public:
  const ::lsmdb::v1::KeyValue& keyvaluelist(int index) const;
  ::lsmdb::v1::KeyValue* add_keyvaluelist();
  const ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>& keyvaluelist() const;
  // @@protoc_insertion_point(class_scope:lsmdb.v1.PrefixResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PrefixResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrefixResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::lsmdb::v1::KeyValue > keyvaluelist_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lsmdb_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PrefixRequest

// string prefixKey = 1;
inline void PrefixRequest::clear_prefixkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefixkey_.ClearToEmpty();
}
inline const std::string& PrefixRequest::prefixkey() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PrefixRequest.prefixKey)
  return _internal_prefixkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrefixRequest::set_prefixkey(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefixkey_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.PrefixRequest.prefixKey)
}
inline std::string* PrefixRequest::mutable_prefixkey() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prefixkey();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PrefixRequest.prefixKey)
  return _s;
}
inline const std::string& PrefixRequest::_internal_prefixkey() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefixkey_.Get();
}
inline void PrefixRequest::_internal_set_prefixkey(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefixkey_.Set(value, GetArena());
}
inline std::string* PrefixRequest::_internal_mutable_prefixkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prefixkey_.Mutable( GetArena());
}
inline std::string* PrefixRequest::release_prefixkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.PrefixRequest.prefixKey)
  return _impl_.prefixkey_.Release();
}
inline void PrefixRequest::set_allocated_prefixkey(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefixkey_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefixkey_.IsDefault()) {
          _impl_.prefixkey_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.PrefixRequest.prefixKey)
}

// -------------------------------------------------------------------

// PrefixResponse

// repeated .lsmdb.v1.KeyValue keyValueList = 1;
inline int PrefixResponse::_internal_keyvaluelist_size() const {
  return _internal_keyvaluelist().size();
}
inline int PrefixResponse::keyvaluelist_size() const {
  return _internal_keyvaluelist_size();
}
inline void PrefixResponse::clear_keyvaluelist() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keyvaluelist_.Clear();
}
inline ::lsmdb::v1::KeyValue* PrefixResponse::mutable_keyvaluelist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PrefixResponse.keyValueList)
  return _internal_mutable_keyvaluelist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>* PrefixResponse::mutable_keyvaluelist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.PrefixResponse.keyValueList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keyvaluelist();
}
inline const ::lsmdb::v1::KeyValue& PrefixResponse::keyvaluelist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PrefixResponse.keyValueList)
  return _internal_keyvaluelist().Get(index);
}
inline ::lsmdb::v1::KeyValue* PrefixResponse::add_keyvaluelist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::lsmdb::v1::KeyValue* _add = _internal_mutable_keyvaluelist()->Add();
  // @@protoc_insertion_point(field_add:lsmdb.v1.PrefixResponse.keyValueList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>& PrefixResponse::keyvaluelist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.PrefixResponse.keyValueList)
  return _internal_keyvaluelist();
}
inline const ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>&
PrefixResponse::_internal_keyvaluelist() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keyvaluelist_;
}
inline ::google::protobuf::RepeatedPtrField<::lsmdb::v1::KeyValue>*
PrefixResponse::_internal_mutable_keyvaluelist() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keyvaluelist_;
}

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.KeyValue.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.KeyValue.key)
  return _s;
}
inline const std::string& KeyValue::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KeyValue::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.KeyValue.key)
  return _impl_.key_.Release();
}
inline void KeyValue::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.KeyValue.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.KeyValue.value)
  return _s;
}
inline const std::string& KeyValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* KeyValue::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.KeyValue.value)
  return _impl_.value_.Release();
}
inline void KeyValue::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.KeyValue.value)
}

// -------------------------------------------------------------------

// BatchPutRequest

// repeated string keys = 1;
inline int BatchPutRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int BatchPutRequest::keys_size() const {
  return _internal_keys_size();
}
inline void BatchPutRequest::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* BatchPutRequest::add_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.BatchPutRequest.keys)
  return _s;
}
inline const std::string& BatchPutRequest::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.BatchPutRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* BatchPutRequest::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.BatchPutRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void BatchPutRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::add_keys(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::add_keys(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::add_keys(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.BatchPutRequest.keys)
}
inline void BatchPutRequest::add_keys(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.BatchPutRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchPutRequest::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.BatchPutRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BatchPutRequest::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.BatchPutRequest.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchPutRequest::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BatchPutRequest::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

// repeated bytes values = 2;
inline int BatchPutRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int BatchPutRequest::values_size() const {
  return _internal_values_size();
}
inline void BatchPutRequest::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* BatchPutRequest::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.BatchPutRequest.values)
  return _s;
}
inline const std::string& BatchPutRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.BatchPutRequest.values)
  return _internal_values().Get(index);
}
inline std::string* BatchPutRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.BatchPutRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void BatchPutRequest::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::set_values(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::set_values(int index, absl::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::add_values(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::add_values(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::add_values(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.BatchPutRequest.values)
}
inline void BatchPutRequest::add_values(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.BatchPutRequest.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchPutRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.BatchPutRequest.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BatchPutRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.BatchPutRequest.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BatchPutRequest::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BatchPutRequest::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// BatchPutReply

// bool data = 1;
inline void BatchPutReply::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = false;
}
inline bool BatchPutReply::data() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.BatchPutReply.data)
  return _internal_data();
}
inline void BatchPutReply::set_data(bool value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.BatchPutReply.data)
}
inline bool BatchPutReply::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline void BatchPutReply::_internal_set_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = value;
}

// -------------------------------------------------------------------

// GetKVsRequest

// repeated string keys = 1;
inline int GetKVsRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int GetKVsRequest::keys_size() const {
  return _internal_keys_size();
}
inline void GetKVsRequest::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* GetKVsRequest::add_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.GetKVsRequest.keys)
  return _s;
}
inline const std::string& GetKVsRequest::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.GetKVsRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* GetKVsRequest::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.GetKVsRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void GetKVsRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::add_keys(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::add_keys(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::add_keys(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.GetKVsRequest.keys)
}
inline void GetKVsRequest::add_keys(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.GetKVsRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetKVsRequest::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.GetKVsRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetKVsRequest::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.GetKVsRequest.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetKVsRequest::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetKVsRequest::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// GetKVsReply

// repeated bytes values = 1;
inline int GetKVsReply::_internal_values_size() const {
  return _internal_values().size();
}
inline int GetKVsReply::values_size() const {
  return _internal_values_size();
}
inline void GetKVsReply::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* GetKVsReply::add_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.GetKVsReply.values)
  return _s;
}
inline const std::string& GetKVsReply::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.GetKVsReply.values)
  return _internal_values().Get(index);
}
inline std::string* GetKVsReply::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.GetKVsReply.values)
  return _internal_mutable_values()->Mutable(index);
}
inline void GetKVsReply::set_values(int index, const std::string& value) {
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::set_values(int index, std::string&& value) {
  _internal_mutable_values()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::set_values(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_values()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::set_values(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_values()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::set_values(int index, absl::string_view value) {
  _internal_mutable_values()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::add_values(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::add_values(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::add_values(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::add_values(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.GetKVsReply.values)
}
inline void GetKVsReply::add_values(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.GetKVsReply.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetKVsReply::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.GetKVsReply.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetKVsReply::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.GetKVsReply.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetKVsReply::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetKVsReply::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// TransferKVRequest

// string regionName = 1;
inline void TransferKVRequest::clear_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.ClearToEmpty();
}
inline const std::string& TransferKVRequest::regionname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferKVRequest.regionName)
  return _internal_regionname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferKVRequest::set_regionname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferKVRequest.regionName)
}
inline std::string* TransferKVRequest::mutable_regionname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_regionname();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferKVRequest.regionName)
  return _s;
}
inline const std::string& TransferKVRequest::_internal_regionname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.regionname_.Get();
}
inline void TransferKVRequest::_internal_set_regionname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.Set(value, GetArena());
}
inline std::string* TransferKVRequest::_internal_mutable_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.regionname_.Mutable( GetArena());
}
inline std::string* TransferKVRequest::release_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.TransferKVRequest.regionName)
  return _impl_.regionname_.Release();
}
inline void TransferKVRequest::set_allocated_regionname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.regionname_.IsDefault()) {
          _impl_.regionname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.TransferKVRequest.regionName)
}

// repeated string keys = 2;
inline int TransferKVRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int TransferKVRequest::keys_size() const {
  return _internal_keys_size();
}
inline void TransferKVRequest::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* TransferKVRequest::add_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.TransferKVRequest.keys)
  return _s;
}
inline const std::string& TransferKVRequest::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferKVRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* TransferKVRequest::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferKVRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void TransferKVRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::add_keys(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::add_keys(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::add_keys(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.TransferKVRequest.keys)
}
inline void TransferKVRequest::add_keys(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.TransferKVRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransferKVRequest::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.TransferKVRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransferKVRequest::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.TransferKVRequest.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransferKVRequest::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransferKVRequest::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

// string nodeAddress = 3;
inline void TransferKVRequest::clear_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.ClearToEmpty();
}
inline const std::string& TransferKVRequest::nodeaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferKVRequest.nodeAddress)
  return _internal_nodeaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferKVRequest::set_nodeaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferKVRequest.nodeAddress)
}
inline std::string* TransferKVRequest::mutable_nodeaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodeaddress();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferKVRequest.nodeAddress)
  return _s;
}
inline const std::string& TransferKVRequest::_internal_nodeaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodeaddress_.Get();
}
inline void TransferKVRequest::_internal_set_nodeaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.Set(value, GetArena());
}
inline std::string* TransferKVRequest::_internal_mutable_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nodeaddress_.Mutable( GetArena());
}
inline std::string* TransferKVRequest::release_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.TransferKVRequest.nodeAddress)
  return _impl_.nodeaddress_.Release();
}
inline void TransferKVRequest::set_allocated_nodeaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodeaddress_.IsDefault()) {
          _impl_.nodeaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.TransferKVRequest.nodeAddress)
}

// -------------------------------------------------------------------

// TransferKVReply

// bool success = 1;
inline void TransferKVReply::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool TransferKVReply::success() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferKVReply.success)
  return _internal_success();
}
inline void TransferKVReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferKVReply.success)
}
inline bool TransferKVReply::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void TransferKVReply::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// TransferRequest

// string regionName = 1;
inline void TransferRequest::clear_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.ClearToEmpty();
}
inline const std::string& TransferRequest::regionname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferRequest.regionName)
  return _internal_regionname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferRequest::set_regionname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferRequest.regionName)
}
inline std::string* TransferRequest::mutable_regionname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_regionname();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferRequest.regionName)
  return _s;
}
inline const std::string& TransferRequest::_internal_regionname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.regionname_.Get();
}
inline void TransferRequest::_internal_set_regionname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.Set(value, GetArena());
}
inline std::string* TransferRequest::_internal_mutable_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.regionname_.Mutable( GetArena());
}
inline std::string* TransferRequest::release_regionname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.TransferRequest.regionName)
  return _impl_.regionname_.Release();
}
inline void TransferRequest::set_allocated_regionname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.regionname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.regionname_.IsDefault()) {
          _impl_.regionname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.TransferRequest.regionName)
}

// repeated string keys = 2;
inline int TransferRequest::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int TransferRequest::keys_size() const {
  return _internal_keys_size();
}
inline void TransferRequest::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* TransferRequest::add_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:lsmdb.v1.TransferRequest.keys)
  return _s;
}
inline const std::string& TransferRequest::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferRequest.keys)
  return _internal_keys().Get(index);
}
inline std::string* TransferRequest::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferRequest.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void TransferRequest::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::add_keys(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::add_keys(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::add_keys(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmdb.v1.TransferRequest.keys)
}
inline void TransferRequest::add_keys(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_keys()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:lsmdb.v1.TransferRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransferRequest::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lsmdb.v1.TransferRequest.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransferRequest::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lsmdb.v1.TransferRequest.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TransferRequest::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TransferRequest::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

// string nodeAddress = 3;
inline void TransferRequest::clear_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.ClearToEmpty();
}
inline const std::string& TransferRequest::nodeaddress() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferRequest.nodeAddress)
  return _internal_nodeaddress();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferRequest::set_nodeaddress(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferRequest.nodeAddress)
}
inline std::string* TransferRequest::mutable_nodeaddress() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodeaddress();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.TransferRequest.nodeAddress)
  return _s;
}
inline const std::string& TransferRequest::_internal_nodeaddress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodeaddress_.Get();
}
inline void TransferRequest::_internal_set_nodeaddress(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.Set(value, GetArena());
}
inline std::string* TransferRequest::_internal_mutable_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nodeaddress_.Mutable( GetArena());
}
inline std::string* TransferRequest::release_nodeaddress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.TransferRequest.nodeAddress)
  return _impl_.nodeaddress_.Release();
}
inline void TransferRequest::set_allocated_nodeaddress(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeaddress_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodeaddress_.IsDefault()) {
          _impl_.nodeaddress_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.TransferRequest.nodeAddress)
}

// -------------------------------------------------------------------

// TransferReply

// bool success = 1;
inline void TransferReply::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool TransferReply::success() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.TransferReply.success)
  return _internal_success();
}
inline void TransferReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.TransferReply.success)
}
inline bool TransferReply::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void TransferReply::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// OpenDBWebRequest

// string dbname = 1;
inline void OpenDBWebRequest::clear_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dbname_.ClearToEmpty();
}
inline const std::string& OpenDBWebRequest::dbname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.OpenDBWebRequest.dbname)
  return _internal_dbname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenDBWebRequest::set_dbname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dbname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.OpenDBWebRequest.dbname)
}
inline std::string* OpenDBWebRequest::mutable_dbname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dbname();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.OpenDBWebRequest.dbname)
  return _s;
}
inline const std::string& OpenDBWebRequest::_internal_dbname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dbname_.Get();
}
inline void OpenDBWebRequest::_internal_set_dbname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dbname_.Set(value, GetArena());
}
inline std::string* OpenDBWebRequest::_internal_mutable_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dbname_.Mutable( GetArena());
}
inline std::string* OpenDBWebRequest::release_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.OpenDBWebRequest.dbname)
  return _impl_.dbname_.Release();
}
inline void OpenDBWebRequest::set_allocated_dbname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dbname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dbname_.IsDefault()) {
          _impl_.dbname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.OpenDBWebRequest.dbname)
}

// -------------------------------------------------------------------

// OpenDBWebReply

// bool value = 1;
inline void OpenDBWebReply::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = false;
}
inline bool OpenDBWebReply::value() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.OpenDBWebReply.value)
  return _internal_value();
}
inline void OpenDBWebReply::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.OpenDBWebReply.value)
}
inline bool OpenDBWebReply::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void OpenDBWebReply::_internal_set_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// OpenDBRequest

// string db_name = 1;
inline void OpenDBRequest::clear_db_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_name_.ClearToEmpty();
}
inline const std::string& OpenDBRequest::db_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.OpenDBRequest.db_name)
  return _internal_db_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpenDBRequest::set_db_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.OpenDBRequest.db_name)
}
inline std::string* OpenDBRequest::mutable_db_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_name();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.OpenDBRequest.db_name)
  return _s;
}
inline const std::string& OpenDBRequest::_internal_db_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_name_.Get();
}
inline void OpenDBRequest::_internal_set_db_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_name_.Set(value, GetArena());
}
inline std::string* OpenDBRequest::_internal_mutable_db_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.db_name_.Mutable( GetArena());
}
inline std::string* OpenDBRequest::release_db_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.OpenDBRequest.db_name)
  return _impl_.db_name_.Release();
}
inline void OpenDBRequest::set_allocated_db_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.db_name_.IsDefault()) {
          _impl_.db_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.OpenDBRequest.db_name)
}

// -------------------------------------------------------------------

// OpenDBReply

// bool value = 1;
inline void OpenDBReply::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = false;
}
inline bool OpenDBReply::value() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.OpenDBReply.value)
  return _internal_value();
}
inline void OpenDBReply::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.OpenDBReply.value)
}
inline bool OpenDBReply::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void OpenDBReply::_internal_set_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// PutRequest

// string key = 1;
inline void PutRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PutRequest.key)
  return _s;
}
inline const std::string& PutRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PutRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PutRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.PutRequest.key)
  return _impl_.key_.Release();
}
inline void PutRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.PutRequest.key)
}

// bytes value = 2;
inline void PutRequest::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PutRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PutRequest.value)
  return _s;
}
inline const std::string& PutRequest::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void PutRequest::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* PutRequest::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* PutRequest::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.PutRequest.value)
  return _impl_.value_.Release();
}
inline void PutRequest::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.PutRequest.value)
}

// -------------------------------------------------------------------

// PutReply

// bool data = 1;
inline void PutReply::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = false;
}
inline bool PutReply::data() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutReply.data)
  return _internal_data();
}
inline void PutReply::set_data(bool value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutReply.data)
}
inline bool PutReply::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline void PutReply::_internal_set_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = value;
}

// -------------------------------------------------------------------

// PutStrRequest

// string key = 1;
inline void PutStrRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutStrRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutStrRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutStrRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutStrRequest.key)
}
inline std::string* PutStrRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PutStrRequest.key)
  return _s;
}
inline const std::string& PutStrRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void PutStrRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PutStrRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PutStrRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.PutStrRequest.key)
  return _impl_.key_.Release();
}
inline void PutStrRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.PutStrRequest.key)
}

// string value = 2;
inline void PutStrRequest::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PutStrRequest::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutStrRequest.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutStrRequest::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutStrRequest.value)
}
inline std::string* PutStrRequest::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.PutStrRequest.value)
  return _s;
}
inline const std::string& PutStrRequest::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void PutStrRequest::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* PutStrRequest::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* PutStrRequest::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.PutStrRequest.value)
  return _impl_.value_.Release();
}
inline void PutStrRequest::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.PutStrRequest.value)
}

// -------------------------------------------------------------------

// PutStrReply

// bool data = 1;
inline void PutStrReply::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = false;
}
inline bool PutStrReply::data() const {
  // @@protoc_insertion_point(field_get:lsmdb.v1.PutStrReply.data)
  return _internal_data();
}
inline void PutStrReply::set_data(bool value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:lsmdb.v1.PutStrReply.data)
}
inline bool PutStrReply::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline void PutStrReply::_internal_set_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// string key = 1;
inline void GetRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.GetRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.GetRequest.key)
  return _s;
}
inline const std::string& GetRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void GetRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* GetRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* GetRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.GetRequest.key)
  return _impl_.key_.Release();
}
inline void GetRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.GetRequest.key)
}

// -------------------------------------------------------------------

// GetReply

// bytes value = 1;
inline void GetReply::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& GetReply::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lsmdb.v1.GetReply.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetReply::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lsmdb.v1.GetReply.value)
}
inline std::string* GetReply::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lsmdb.v1.GetReply.value)
  return _s;
}
inline const std::string& GetReply::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* GetReply::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* GetReply::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lsmdb.v1.GetReply.value)
  return _impl_.value_.Release();
}
inline void GetReply::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lsmdb.v1.GetReply.value)
}

// -------------------------------------------------------------------

// CloseDBRequest

// -------------------------------------------------------------------

// CloseDBReply

// -------------------------------------------------------------------

// CloseDBWebRequest

// -------------------------------------------------------------------

// CloseDBWebReply

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace lsmdb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_lsmdb_2eproto_2epb_2eh
