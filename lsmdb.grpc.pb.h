// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lsmdb.proto
#ifndef GRPC_lsmdb_2eproto__INCLUDED
#define GRPC_lsmdb_2eproto__INCLUDED

#include "lsmdb.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace lsmdb {
namespace v1 {

// The Lsmdb service definition.
class Lsmdb final {
 public:
  static constexpr char const* service_full_name() {
    return "lsmdb.v1.Lsmdb";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a register
    virtual ::grpc::Status OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::lsmdb::v1::OpenDBReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>> AsyncOpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>>(AsyncOpenDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>> PrepareAsyncOpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>>(PrepareAsyncOpenDBRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::lsmdb::v1::OpenDBWebReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>> AsyncOpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>>(AsyncOpenDBWebRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>> PrepareAsyncOpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>>(PrepareAsyncOpenDBWebRaw(context, request, cq));
    }
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::lsmdb::v1::PutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>> AsyncPut(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>> PrepareAsyncPut(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>>(PrepareAsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::lsmdb::v1::BatchPutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>> AsyncBatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>>(AsyncBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>> PrepareAsyncBatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>>(PrepareAsyncBatchPutRaw(context, request, cq));
    }
    virtual ::grpc::Status PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::lsmdb::v1::PutStrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>> AsyncPutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>>(AsyncPutStrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>> PrepareAsyncPutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>>(PrepareAsyncPutStrRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::lsmdb::v1::GetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>> AsyncGet(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::lsmdb::v1::CloseDBReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>> AsyncCloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>>(AsyncCloseDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>> PrepareAsyncCloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>>(PrepareAsyncCloseDBRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::lsmdb::v1::CloseDBWebReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>> AsyncCloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>>(AsyncCloseDBWebRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>> PrepareAsyncCloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>>(PrepareAsyncCloseDBWebRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::lsmdb::v1::TransferKVReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>> AsyncTransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>>(AsyncTransferKVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>> PrepareAsyncTransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>>(PrepareAsyncTransferKVRaw(context, request, cq));
    }
    virtual ::grpc::Status Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::lsmdb::v1::TransferReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>> AsyncTransfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::lsmdb::v1::GetKVsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>> AsyncGetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>>(AsyncGetKVsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>> PrepareAsyncGetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>>(PrepareAsyncGetKVsRaw(context, request, cq));
    }
    virtual ::grpc::Status PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::lsmdb::v1::PrefixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>> AsyncPrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>>(AsyncPrefixDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>> PrepareAsyncPrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>>(PrepareAsyncPrefixDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a register
      virtual void OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>* AsyncOpenDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBReply>* PrepareAsyncOpenDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>* AsyncOpenDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::OpenDBWebReply>* PrepareAsyncOpenDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>* AsyncPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutReply>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>* AsyncBatchPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::BatchPutReply>* PrepareAsyncBatchPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>* AsyncPutStrRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PutStrReply>* PrepareAsyncPutStrRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>* AsyncCloseDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBReply>* PrepareAsyncCloseDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>* AsyncCloseDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::CloseDBWebReply>* PrepareAsyncCloseDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>* AsyncTransferKVRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferKVReply>* PrepareAsyncTransferKVRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>* AsyncTransferRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::TransferReply>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>* AsyncGetKVsRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::GetKVsReply>* PrepareAsyncGetKVsRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>* AsyncPrefixDataRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lsmdb::v1::PrefixResponse>* PrepareAsyncPrefixDataRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::lsmdb::v1::OpenDBReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>> AsyncOpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>>(AsyncOpenDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>> PrepareAsyncOpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>>(PrepareAsyncOpenDBRaw(context, request, cq));
    }
    ::grpc::Status OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::lsmdb::v1::OpenDBWebReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>> AsyncOpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>>(AsyncOpenDBWebRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>> PrepareAsyncOpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>>(PrepareAsyncOpenDBWebRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::lsmdb::v1::PutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>> AsyncPut(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>> PrepareAsyncPut(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::lsmdb::v1::BatchPutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>> AsyncBatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>>(AsyncBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>> PrepareAsyncBatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>>(PrepareAsyncBatchPutRaw(context, request, cq));
    }
    ::grpc::Status PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::lsmdb::v1::PutStrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>> AsyncPutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>>(AsyncPutStrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>> PrepareAsyncPutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>>(PrepareAsyncPutStrRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::lsmdb::v1::GetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>> AsyncGet(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::lsmdb::v1::CloseDBReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>> AsyncCloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>>(AsyncCloseDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>> PrepareAsyncCloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>>(PrepareAsyncCloseDBRaw(context, request, cq));
    }
    ::grpc::Status CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::lsmdb::v1::CloseDBWebReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>> AsyncCloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>>(AsyncCloseDBWebRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>> PrepareAsyncCloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>>(PrepareAsyncCloseDBWebRaw(context, request, cq));
    }
    ::grpc::Status TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::lsmdb::v1::TransferKVReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>> AsyncTransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>>(AsyncTransferKVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>> PrepareAsyncTransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>>(PrepareAsyncTransferKVRaw(context, request, cq));
    }
    ::grpc::Status Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::lsmdb::v1::TransferReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>> AsyncTransfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    ::grpc::Status GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::lsmdb::v1::GetKVsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>> AsyncGetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>>(AsyncGetKVsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>> PrepareAsyncGetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>>(PrepareAsyncGetKVsRaw(context, request, cq));
    }
    ::grpc::Status PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::lsmdb::v1::PrefixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>> AsyncPrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>>(AsyncPrefixDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>> PrepareAsyncPrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>>(PrepareAsyncPrefixDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response, std::function<void(::grpc::Status)>) override;
      void OpenDB(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response, std::function<void(::grpc::Status)>) override;
      void OpenDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response, std::function<void(::grpc::Status)>) override;
      void BatchPut(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response, std::function<void(::grpc::Status)>) override;
      void PutStr(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response, std::function<void(::grpc::Status)>) override;
      void CloseDB(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response, std::function<void(::grpc::Status)>) override;
      void CloseDBWeb(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response, std::function<void(::grpc::Status)>) override;
      void TransferKV(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response, std::function<void(::grpc::Status)>) override;
      void Transfer(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response, std::function<void(::grpc::Status)>) override;
      void GetKVs(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response, std::function<void(::grpc::Status)>) override;
      void PrefixData(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>* AsyncOpenDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBReply>* PrepareAsyncOpenDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>* AsyncOpenDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::OpenDBWebReply>* PrepareAsyncOpenDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::OpenDBWebRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>* AsyncPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutReply>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>* AsyncBatchPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::BatchPutReply>* PrepareAsyncBatchPutRaw(::grpc::ClientContext* context, const ::lsmdb::v1::BatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>* AsyncPutStrRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PutStrReply>* PrepareAsyncPutStrRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PutStrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>* AsyncCloseDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBReply>* PrepareAsyncCloseDBRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>* AsyncCloseDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::CloseDBWebReply>* PrepareAsyncCloseDBWebRaw(::grpc::ClientContext* context, const ::lsmdb::v1::CloseDBWebRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>* AsyncTransferKVRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferKVReply>* PrepareAsyncTransferKVRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferKVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>* AsyncTransferRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::TransferReply>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::lsmdb::v1::TransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>* AsyncGetKVsRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::GetKVsReply>* PrepareAsyncGetKVsRaw(::grpc::ClientContext* context, const ::lsmdb::v1::GetKVsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>* AsyncPrefixDataRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lsmdb::v1::PrefixResponse>* PrepareAsyncPrefixDataRaw(::grpc::ClientContext* context, const ::lsmdb::v1::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDB_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDBWeb_;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchPut_;
    const ::grpc::internal::RpcMethod rpcmethod_PutStr_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDB_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDBWeb_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferKV_;
    const ::grpc::internal::RpcMethod rpcmethod_Transfer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKVs_;
    const ::grpc::internal::RpcMethod rpcmethod_PrefixData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a register
    virtual ::grpc::Status OpenDB(::grpc::ServerContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response);
    virtual ::grpc::Status OpenDBWeb(::grpc::ServerContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response);
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response);
    virtual ::grpc::Status BatchPut(::grpc::ServerContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response);
    virtual ::grpc::Status PutStr(::grpc::ServerContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response);
    virtual ::grpc::Status CloseDB(::grpc::ServerContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response);
    virtual ::grpc::Status CloseDBWeb(::grpc::ServerContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response);
    virtual ::grpc::Status TransferKV(::grpc::ServerContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response);
    virtual ::grpc::Status Transfer(::grpc::ServerContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response);
    virtual ::grpc::Status GetKVs(::grpc::ServerContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response);
    virtual ::grpc::Status PrefixData(::grpc::ServerContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDB() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDB(::grpc::ServerContext* context, ::lsmdb::v1::OpenDBRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::OpenDBReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDBWeb(::grpc::ServerContext* context, ::lsmdb::v1::OpenDBWebRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::OpenDBWebReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::lsmdb::v1::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::PutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchPut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchPut(::grpc::ServerContext* context, ::lsmdb::v1::BatchPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::BatchPutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutStr() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutStr(::grpc::ServerContext* context, ::lsmdb::v1::PutStrRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::PutStrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::lsmdb::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::GetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDB() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDB(::grpc::ServerContext* context, ::lsmdb::v1::CloseDBRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::CloseDBReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDBWeb(::grpc::ServerContext* context, ::lsmdb::v1::CloseDBWebRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::CloseDBWebReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferKV() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferKV(::grpc::ServerContext* context, ::lsmdb::v1::TransferKVRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::TransferKVReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transfer() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::lsmdb::v1::TransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::TransferReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKVs() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVs(::grpc::ServerContext* context, ::lsmdb::v1::GetKVsRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::GetKVsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrefixData() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrefixData(::grpc::ServerContext* context, ::lsmdb::v1::PrefixRequest* request, ::grpc::ServerAsyncResponseWriter< ::lsmdb::v1::PrefixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OpenDB<WithAsyncMethod_OpenDBWeb<WithAsyncMethod_Put<WithAsyncMethod_BatchPut<WithAsyncMethod_PutStr<WithAsyncMethod_Get<WithAsyncMethod_CloseDB<WithAsyncMethod_CloseDBWeb<WithAsyncMethod_TransferKV<WithAsyncMethod_Transfer<WithAsyncMethod_GetKVs<WithAsyncMethod_PrefixData<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenDB() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::OpenDBRequest, ::lsmdb::v1::OpenDBReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::OpenDBRequest* request, ::lsmdb::v1::OpenDBReply* response) { return this->OpenDB(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDB(
        ::grpc::MessageAllocator< ::lsmdb::v1::OpenDBRequest, ::lsmdb::v1::OpenDBReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::OpenDBRequest, ::lsmdb::v1::OpenDBReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDB(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::OpenDBWebRequest, ::lsmdb::v1::OpenDBWebReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::OpenDBWebRequest* request, ::lsmdb::v1::OpenDBWebReply* response) { return this->OpenDBWeb(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDBWeb(
        ::grpc::MessageAllocator< ::lsmdb::v1::OpenDBWebRequest, ::lsmdb::v1::OpenDBWebReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::OpenDBWebRequest, ::lsmdb::v1::OpenDBWebReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDBWeb(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PutRequest, ::lsmdb::v1::PutReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::PutRequest* request, ::lsmdb::v1::PutReply* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::lsmdb::v1::PutRequest, ::lsmdb::v1::PutReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PutRequest, ::lsmdb::v1::PutReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BatchPut() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::BatchPutRequest, ::lsmdb::v1::BatchPutReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::BatchPutRequest* request, ::lsmdb::v1::BatchPutReply* response) { return this->BatchPut(context, request, response); }));}
    void SetMessageAllocatorFor_BatchPut(
        ::grpc::MessageAllocator< ::lsmdb::v1::BatchPutRequest, ::lsmdb::v1::BatchPutReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::BatchPutRequest, ::lsmdb::v1::BatchPutReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchPut(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutStr() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PutStrRequest, ::lsmdb::v1::PutStrReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::PutStrRequest* request, ::lsmdb::v1::PutStrReply* response) { return this->PutStr(context, request, response); }));}
    void SetMessageAllocatorFor_PutStr(
        ::grpc::MessageAllocator< ::lsmdb::v1::PutStrRequest, ::lsmdb::v1::PutStrReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PutStrRequest, ::lsmdb::v1::PutStrReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutStr(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::GetRequest, ::lsmdb::v1::GetReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::GetRequest* request, ::lsmdb::v1::GetReply* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::lsmdb::v1::GetRequest, ::lsmdb::v1::GetReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::GetRequest, ::lsmdb::v1::GetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseDB() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::CloseDBRequest, ::lsmdb::v1::CloseDBReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::CloseDBRequest* request, ::lsmdb::v1::CloseDBReply* response) { return this->CloseDB(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDB(
        ::grpc::MessageAllocator< ::lsmdb::v1::CloseDBRequest, ::lsmdb::v1::CloseDBReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::CloseDBRequest, ::lsmdb::v1::CloseDBReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDB(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::CloseDBWebRequest, ::lsmdb::v1::CloseDBWebReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::CloseDBWebRequest* request, ::lsmdb::v1::CloseDBWebReply* response) { return this->CloseDBWeb(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDBWeb(
        ::grpc::MessageAllocator< ::lsmdb::v1::CloseDBWebRequest, ::lsmdb::v1::CloseDBWebReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::CloseDBWebRequest, ::lsmdb::v1::CloseDBWebReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDBWeb(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferKV() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::TransferKVRequest, ::lsmdb::v1::TransferKVReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::TransferKVRequest* request, ::lsmdb::v1::TransferKVReply* response) { return this->TransferKV(context, request, response); }));}
    void SetMessageAllocatorFor_TransferKV(
        ::grpc::MessageAllocator< ::lsmdb::v1::TransferKVRequest, ::lsmdb::v1::TransferKVReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::TransferKVRequest, ::lsmdb::v1::TransferKVReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferKV(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Transfer() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::TransferRequest, ::lsmdb::v1::TransferReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::TransferRequest* request, ::lsmdb::v1::TransferReply* response) { return this->Transfer(context, request, response); }));}
    void SetMessageAllocatorFor_Transfer(
        ::grpc::MessageAllocator< ::lsmdb::v1::TransferRequest, ::lsmdb::v1::TransferReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::TransferRequest, ::lsmdb::v1::TransferReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetKVs() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::GetKVsRequest, ::lsmdb::v1::GetKVsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::GetKVsRequest* request, ::lsmdb::v1::GetKVsReply* response) { return this->GetKVs(context, request, response); }));}
    void SetMessageAllocatorFor_GetKVs(
        ::grpc::MessageAllocator< ::lsmdb::v1::GetKVsRequest, ::lsmdb::v1::GetKVsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::GetKVsRequest, ::lsmdb::v1::GetKVsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVs(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrefixData() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PrefixRequest, ::lsmdb::v1::PrefixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lsmdb::v1::PrefixRequest* request, ::lsmdb::v1::PrefixResponse* response) { return this->PrefixData(context, request, response); }));}
    void SetMessageAllocatorFor_PrefixData(
        ::grpc::MessageAllocator< ::lsmdb::v1::PrefixRequest, ::lsmdb::v1::PrefixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lsmdb::v1::PrefixRequest, ::lsmdb::v1::PrefixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrefixData(
      ::grpc::CallbackServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OpenDB<WithCallbackMethod_OpenDBWeb<WithCallbackMethod_Put<WithCallbackMethod_BatchPut<WithCallbackMethod_PutStr<WithCallbackMethod_Get<WithCallbackMethod_CloseDB<WithCallbackMethod_CloseDBWeb<WithCallbackMethod_TransferKV<WithCallbackMethod_Transfer<WithCallbackMethod_GetKVs<WithCallbackMethod_PrefixData<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDB() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchPut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutStr() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDB() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferKV() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transfer() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKVs() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrefixData() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDB() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDBWeb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchPut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutStr() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutStr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDB() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDBWeb(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferKV() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferKV(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transfer() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKVs() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrefixData() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrefixData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenDB() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDB(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDBWeb(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenDBWeb(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BatchPut() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BatchPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BatchPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutStr() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutStr(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutStr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseDB() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDB(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDBWeb(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseDBWeb(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferKV() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferKV(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferKV(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Transfer() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transfer(context, request, response); }));
    }
    ~WithRawCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetKVs() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKVs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrefixData() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrefixData(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrefixData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDB() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::OpenDBRequest, ::lsmdb::v1::OpenDBReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::OpenDBRequest, ::lsmdb::v1::OpenDBReply>* streamer) {
                       return this->StreamedOpenDB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBRequest* /*request*/, ::lsmdb::v1::OpenDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::OpenDBRequest,::lsmdb::v1::OpenDBReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDBWeb() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::OpenDBWebRequest, ::lsmdb::v1::OpenDBWebReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::OpenDBWebRequest, ::lsmdb::v1::OpenDBWebReply>* streamer) {
                       return this->StreamedOpenDBWeb(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::OpenDBWebRequest* /*request*/, ::lsmdb::v1::OpenDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDBWeb(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::OpenDBWebRequest,::lsmdb::v1::OpenDBWebReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::PutRequest, ::lsmdb::v1::PutReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::PutRequest, ::lsmdb::v1::PutReply>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutRequest* /*request*/, ::lsmdb::v1::PutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::PutRequest,::lsmdb::v1::PutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BatchPut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::BatchPutRequest, ::lsmdb::v1::BatchPutReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::BatchPutRequest, ::lsmdb::v1::BatchPutReply>* streamer) {
                       return this->StreamedBatchPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchPut(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::BatchPutRequest* /*request*/, ::lsmdb::v1::BatchPutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::BatchPutRequest,::lsmdb::v1::BatchPutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutStr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutStr() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::PutStrRequest, ::lsmdb::v1::PutStrReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::PutStrRequest, ::lsmdb::v1::PutStrReply>* streamer) {
                       return this->StreamedPutStr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutStr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutStr(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PutStrRequest* /*request*/, ::lsmdb::v1::PutStrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutStr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::PutStrRequest,::lsmdb::v1::PutStrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::GetRequest, ::lsmdb::v1::GetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::GetRequest, ::lsmdb::v1::GetReply>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetRequest* /*request*/, ::lsmdb::v1::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::GetRequest,::lsmdb::v1::GetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDB() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::CloseDBRequest, ::lsmdb::v1::CloseDBReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::CloseDBRequest, ::lsmdb::v1::CloseDBReply>* streamer) {
                       return this->StreamedCloseDB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDB(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBRequest* /*request*/, ::lsmdb::v1::CloseDBReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::CloseDBRequest,::lsmdb::v1::CloseDBReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDBWeb : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDBWeb() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::CloseDBWebRequest, ::lsmdb::v1::CloseDBWebReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::CloseDBWebRequest, ::lsmdb::v1::CloseDBWebReply>* streamer) {
                       return this->StreamedCloseDBWeb(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseDBWeb() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDBWeb(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::CloseDBWebRequest* /*request*/, ::lsmdb::v1::CloseDBWebReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDBWeb(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::CloseDBWebRequest,::lsmdb::v1::CloseDBWebReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferKV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferKV() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::TransferKVRequest, ::lsmdb::v1::TransferKVReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::TransferKVRequest, ::lsmdb::v1::TransferKVReply>* streamer) {
                       return this->StreamedTransferKV(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferKV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferKV(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferKVRequest* /*request*/, ::lsmdb::v1::TransferKVReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferKV(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::TransferKVRequest,::lsmdb::v1::TransferKVReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transfer() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::TransferRequest, ::lsmdb::v1::TransferReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::TransferRequest, ::lsmdb::v1::TransferReply>* streamer) {
                       return this->StreamedTransfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::TransferRequest* /*request*/, ::lsmdb::v1::TransferReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::TransferRequest,::lsmdb::v1::TransferReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKVs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKVs() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::GetKVsRequest, ::lsmdb::v1::GetKVsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::GetKVsRequest, ::lsmdb::v1::GetKVsReply>* streamer) {
                       return this->StreamedGetKVs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKVs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKVs(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::GetKVsRequest* /*request*/, ::lsmdb::v1::GetKVsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKVs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::GetKVsRequest,::lsmdb::v1::GetKVsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrefixData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrefixData() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lsmdb::v1::PrefixRequest, ::lsmdb::v1::PrefixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lsmdb::v1::PrefixRequest, ::lsmdb::v1::PrefixResponse>* streamer) {
                       return this->StreamedPrefixData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrefixData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrefixData(::grpc::ServerContext* /*context*/, const ::lsmdb::v1::PrefixRequest* /*request*/, ::lsmdb::v1::PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrefixData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lsmdb::v1::PrefixRequest,::lsmdb::v1::PrefixResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OpenDB<WithStreamedUnaryMethod_OpenDBWeb<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_BatchPut<WithStreamedUnaryMethod_PutStr<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CloseDB<WithStreamedUnaryMethod_CloseDBWeb<WithStreamedUnaryMethod_TransferKV<WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_GetKVs<WithStreamedUnaryMethod_PrefixData<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OpenDB<WithStreamedUnaryMethod_OpenDBWeb<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_BatchPut<WithStreamedUnaryMethod_PutStr<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_CloseDB<WithStreamedUnaryMethod_CloseDBWeb<WithStreamedUnaryMethod_TransferKV<WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_GetKVs<WithStreamedUnaryMethod_PrefixData<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace lsmdb


#endif  // GRPC_lsmdb_2eproto__INCLUDED
